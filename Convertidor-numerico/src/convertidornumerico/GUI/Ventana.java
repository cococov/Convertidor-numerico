package convertidornumerico.GUI;

import static convertidornumerico.logica.ConvertidorNumerico.LOG;
import static convertidornumerico.utils.Excepciones.cumpleBinario;
import static convertidornumerico.utils.Excepciones.cumpleDecimal;
import static convertidornumerico.utils.Excepciones.cumpleHexadecimal;
import static convertidornumerico.utils.Excepciones.cumpleOctal;
import java.io.File;
import java.io.FileOutputStream;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Juan Carlos Lamas Alfaro
 */
public class Ventana extends javax.swing.JFrame {

    FileOutputStream salida;
    JFileChooser seleccionado = new JFileChooser();
    File archivo;

    /**
     * Creates new form Ventana
     */
    public Ventana() {        
        initComponents();
        jToText.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem3 = new javax.swing.JMenuItem();
        jFromText = new javax.swing.JTextField();
        jToText = new javax.swing.JTextField();
        jConvertir = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jFrom = new javax.swing.JComboBox<>();
        jTo = new javax.swing.JComboBox<>();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jGuardar = new javax.swing.JMenuItem();
        jSalir = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jAbout = new javax.swing.JMenuItem();

        jMenuItem3.setText("jMenuItem3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jConvertir.setText("Convertir");
        jConvertir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jConvertirActionPerformed(evt);
            }
        });

        jLabel1.setText("De:");

        jLabel2.setText("A:");

        jFrom.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Decimal", "Octal", "Hexadecimal", "Binario" }));

        jTo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Decimal", "Octal", "Hexadecimal", "Binario" }));

        jMenuBar1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jMenu1.setText("File");

        jGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        jGuardar.setText("Guardar");
        jGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jGuardarActionPerformed(evt);
            }
        });
        jMenu1.add(jGuardar);

        jSalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        jSalir.setText("Salir");
        jSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSalirActionPerformed(evt);
            }
        });
        jMenu1.add(jSalir);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        jMenu3.setText("Help");

        jAbout.setText("About");
        jAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAboutActionPerformed(evt);
            }
        });
        jMenu3.add(jAbout);

        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jFromText, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                        .addComponent(jConvertir))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToText, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(83, 83, 83)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jFromText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jConvertir))
                .addContainerGap(140, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jConvertirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jConvertirActionPerformed
        String from = jFrom.getItemAt(jFrom.getSelectedIndex());
        String to = jTo.getItemAt(jTo.getSelectedIndex());
        String numero = jFromText.getText();
        String str;
        String dec;
        String octa;
        String hexa;
        String bin;
        switch (from) {
            case ("Decimal"):
                if (cumpleDecimal(numero)) {
                    switch (to) {
                        case ("Decimal"):
                            jToText.setText(numero);
                            str = numero + " (Decimal) -> (Decimal) " + numero;
                            System.out.println(str);
                            LOG.add(str + "\n");
                            break;
                        case ("Octal"):
                            octa = Integer.toOctalString(Integer.parseInt(numero));
                            jToText.setText(octa);
                            str = numero + " (Decimal) -> (Octal) " + octa;
                            System.out.println(str);
                            LOG.add(str + "\n");
                            break;
                        case ("Hexadecimal"):
                            hexa = Integer.toHexString(Integer.parseInt(numero));
                            jToText.setText(hexa);
                            str = numero + " (Decimal) -> (Hexadecimal) " + hexa;
                            System.out.println(str);
                            LOG.add(str + "\n");
                            break;
                        case ("Binario"):
                            bin = Integer.toBinaryString(Integer.parseInt(numero));
                            jToText.setText(bin);
                            str = numero + " (Decimal) -> (Binario) " + bin;
                            System.out.println(str);
                            LOG.add(str + "\n");
                            break;
                        default:
                            System.out.println("Seleccion erronea en combobox jTo");
                    }
                } else {
                    System.out.println(numero + " (ERROR)");
                    LOG.add(numero + " (ERROR)" + "\n");
                    JOptionPane.showMessageDialog(null, "El numero a convertir no es decimal o posee caracteres erroneos.", "Error!", JOptionPane.WARNING_MESSAGE);
                }
                break;
            case ("Octal"):
                if (cumpleOctal(numero)) {
                    switch (to) {
                        case ("Decimal"):
                            dec = "" + Integer.parseInt(numero, 8);
                            jToText.setText(dec);
                            str = numero + " (Octal) -> (Decimal) " + dec;
                            System.out.println(str);
                            LOG.add(str + "\n");
                            break;
                        case ("Octal"):
                            jToText.setText(numero);
                            str = numero + " (Octal) -> (Octal) " + numero;
                            System.out.println(str);
                            LOG.add(str + "\n");
                            break;
                        case ("Hexadecimal"):
                            hexa = Integer.toHexString(Integer.parseInt(numero, 8));
                            jToText.setText(hexa);
                            str = numero + " (Octal) -> (Hexadecimal) " + hexa;
                            System.out.println(str);
                            LOG.add(str + "\n");
                            break;
                        case ("Binario"):
                            bin = Integer.toBinaryString(Integer.parseInt(numero, 8));
                            jToText.setText(bin);
                            str = numero + " (Octal) -> (Binario) " + bin;
                            System.out.println(str);
                            LOG.add(str + "\n");
                            break;
                        default:
                            System.out.println("Seleccion erronea en combobox jTo");
                    }
                } else {
                    System.out.println(numero + " (ERROR)");
                    LOG.add(numero + " (ERROR)" + "\n");
                    JOptionPane.showMessageDialog(null, "El numero a convertir no es octal o posee caracteres erroneos.", "Error!", JOptionPane.WARNING_MESSAGE);
                }
                break;
            case ("Hexadecimal"):
                if (cumpleHexadecimal(numero)) {
                    switch (to) {
                        case ("Decimal"):
                            dec = "" + Integer.parseInt(numero, 16);
                            jToText.setText(dec);
                            str = numero + " (Hexadecimal) -> (Decimal) " + dec;
                            System.out.println(str);
                            LOG.add(str + "\n");
                            break;
                        case ("Octal"):
                            octa = Integer.toOctalString(Integer.parseInt(numero, 16));
                            jToText.setText(octa);
                            str = numero + " (Hexadecimal) -> (Octal) " + octa;
                            System.out.println(str);
                            LOG.add(str + "\n");
                            break;
                        case ("Hexadecimal"):
                            jToText.setText(numero);
                            str = numero + " (Hexadecimal) -> (Hexadecimal) " + numero;
                            System.out.println(str);
                            LOG.add(str + "\n");
                            break;
                        case ("Binario"):
                            bin = Integer.toBinaryString(Integer.parseInt(numero, 16));
                            jToText.setText(bin);
                            str = numero + " (Hexadecimal) -> (Binario) " + bin;
                            System.out.println(str);
                            LOG.add(str + "\n");
                            break;
                        default:
                            System.out.println("Seleccion erronea en combobox jTo");
                    }
                } else {
                    System.out.println(numero + " (ERROR)");
                    LOG.add(numero + " (ERROR)" + "\n");
                    JOptionPane.showMessageDialog(null, "El numero a convertir no es hexadecimal o posee caracteres erroneos.", "Error!", JOptionPane.WARNING_MESSAGE);
                }
                break;
            case ("Binario"):
                if (cumpleBinario(numero)) {
                    switch (to) {
                        case ("Decimal"):
                            dec = "" + Integer.parseInt(numero, 2);
                            jToText.setText(dec);
                            str = numero + " (Binario) -> (Decimal) " + dec;
                            System.out.println(str);
                            LOG.add(str + "\n");
                            break;
                        case ("Octal"):
                            octa = Integer.toOctalString(Integer.parseInt(numero, 2));
                            jToText.setText(octa);
                            str = numero + " (Binario) -> (Octal) " + octa;
                            System.out.println(str);
                            LOG.add(str + "\n");
                            break;
                        case ("Hexadecimal"):
                            hexa = Integer.toHexString(Integer.parseInt(numero, 2));
                            jToText.setText(hexa);
                            str = numero + " (Binario) -> (Hexadecimal) " + hexa;
                            System.out.println(str);
                            LOG.add(str + "\n");
                            break;
                        case ("Binario"):
                            jToText.setText(numero);
                            str = numero + " (Binario) -> (Binario) " + numero;
                            System.out.println(str);
                            LOG.add(str + "\n");
                            break;
                        default:
                            System.out.println("Seleccion erronea en combobox jTo");
                    }
                } else {
                    System.out.println(numero + " (ERROR)");
                    LOG.add(numero + " (ERROR)" + "\n");
                    JOptionPane.showMessageDialog(null, "El numero a convertir no es binario o posee caracteres erroneos.", "Error!", JOptionPane.WARNING_MESSAGE);
                }
                break;
            default:
                System.out.println("Seleccion erronea en combobox jFrom");
        }
    }//GEN-LAST:event_jConvertirActionPerformed

    private void jAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAboutActionPerformed
        About about = new About();
        about.setLocationRelativeTo(null);
        about.setResizable(false);
        about.setVisible(true);
    }//GEN-LAST:event_jAboutActionPerformed

    private void jSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSalirActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jSalirActionPerformed

    private void jGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jGuardarActionPerformed
        String contenido = "";
        if (seleccionado.showDialog(null, "Guardar texto") == JFileChooser.APPROVE_OPTION) {
            archivo = seleccionado.getSelectedFile();
            if (archivo.getName().endsWith("txt")) {
                for (int i = 0; i < LOG.size(); i++) {
                    contenido += LOG.get(i) + "\n";
                }
                String respuesta = GuardarATexto(archivo, contenido);
                if (respuesta != null) {
                    JOptionPane.showMessageDialog(null, respuesta);
                } else {
                    JOptionPane.showMessageDialog(null, "Error al guardar texto.");
                }
            } else {
                JOptionPane.showMessageDialog(null, "El texto se debe guardar en un formato de texto.");
            }
        }
    }//GEN-LAST:event_jGuardarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Ventana().setVisible(true);
            }
        });
    }

    public String GuardarATexto(File archivo, String contenido) {
        String respuesta = null;
        try {
            salida = new FileOutputStream(archivo);
            byte[] bytesTxt = contenido.getBytes();
            salida.write(bytesTxt);
            respuesta = "Se guardo con exito el archivo";
        } catch (Exception e) {
        }
        return respuesta;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem jAbout;
    private javax.swing.JButton jConvertir;
    private javax.swing.JComboBox<String> jFrom;
    private javax.swing.JTextField jFromText;
    private javax.swing.JMenuItem jGuardar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jSalir;
    private javax.swing.JComboBox<String> jTo;
    private javax.swing.JTextField jToText;
    // End of variables declaration//GEN-END:variables
}
